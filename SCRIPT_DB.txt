CREATE DATABASE project_bar;

USE project_bar;


CREATE TABLE IF NOT EXISTS status(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(255) NOT NULL
);


CREATE TABLE IF NOT EXISTS rol(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS user(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(255) NOT NULL,
	email VARCHAR(255) UNIQUE NOT NULL,
	password VARCHAR(255) NOT NULL,
	id_status INTEGER,
	id_rol INTEGER,
	FOREIGN KEY(id_rol) REFERENCES rol(id),
	FOREIGN KEY(id_status) REFERENCES Status(id)
);

CREATE TABLE IF NOT EXISTS product(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name_product VARCHAR(255) UNIQUE NOT NULL,
	price DECIMAL(65, 2) NOT NULL,
	Stock INTEGER NOT NULL,	
	id_status INTEGER,
	FOREIGN KEY(id_status) REFERENCES Status(id)
);

CREATE TABLE IF NOT EXISTS event(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name_event VARCHAR(255) NOT NULL,
	date DATETIME NOT NULL
);

CREATE TABLE IF NOT EXISTS `table`(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name_table VARCHAR(20) NOT NULL,
	id_status INTEGER,
	FOREIGN KEY(id_status) REFERENCES Status(id)
);


CREATE TABLE IF NOT EXISTS `order`(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	type_document VARCHAR(255) NOT NULL,
	num_document INTEGER NOT NULL,
	id_table INTEGER,
	FOREIGN KEY(id_table) REFERENCES `table`(id)
);

CREATE TABLE IF NOT EXISTS order_product(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	id_order INTEGER,
	id_product INTEGER,
	acount INTEGER NOT NULL,
	total DECIMAL(65,2),
	id_status INTEGER,
	FOREIGN KEY(id_order) REFERENCES `order`(id),
	FOREIGN KEY(id_product) REFERENCES product(id),
	FOREIGN KEY(id_status) REFERENCES Status(id)
);




/*Procedures*/


----------------------------EVENTS
--INSERT
DELIMITER //
CREATE PROCEDURE insertEvent (
	IN name_event VARCHAR(255),
	IN date DATETIME 
)
BEGIN 
	INSERT INTO event(name_event, date) values (name_event, date);
END //
DELIMITER ;


--SELECT ACTIVE
DELIMITER //
CREATE PROCEDURE selectEventActive (
)
BEGIN 
	SELECT name_event, date from event where date >= now();
END //
DELIMITER ;

--UPDATE
DELIMITER //
CREATE PROCEDURE updateEvent (
    IN id_p INTEGER,
    IN name_event_p VARCHAR(255),
    IN date_p DATETIME
)
BEGIN 
    UPDATE event SET name_event = name_event_p, date = date_p WHERE id = id_p;
END //
DELIMITER ;


--DELETE
DELIMITER //
CREATE PROCEDURE daleteEvent (
    IN id_p INTEGER
)
BEGIN 
    DELETE FROM event WHERE id = id_p;
END //
DELIMITER ;





--------------------------------USERS
--SELECT
DELIMITER //
CREATE PROCEDURE selectUser()
BEGIN 
	Select user.id, user.name, user.email, Status.name AS Status, rol.name AS rol from user inner join status on user.id_status = Status.id INNER JOIN rol on rol.id = user.id_rol;
END //
DELIMITER ;




