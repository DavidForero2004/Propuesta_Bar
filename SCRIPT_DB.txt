CREATE DATABASE  project_bar
    CHARACTER SET utf8mb4
    COLLATE utf8mb4_unicode_ci;

USE project_bar;


CREATE TABLE IF NOT EXISTS status(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(255) NOT NULL
);


CREATE TABLE IF NOT EXISTS rol(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS user(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(255) NOT NULL,
	email VARCHAR(255) UNIQUE NOT NULL,
	password VARCHAR(255) NOT NULL,
	id_status INTEGER,
	id_rol INTEGER,
	FOREIGN KEY(id_rol) REFERENCES rol(id),
	FOREIGN KEY(id_status) REFERENCES status(id)
);

CREATE TABLE IF NOT EXISTS product(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name_product VARCHAR(255) UNIQUE NOT NULL,
	image VARCHAR(255) NOT NULL,
	price DECIMAL(65, 2) NOT NULL,
	stock INTEGER NOT NULL,	
	id_status INTEGER,
	FOREIGN KEY(id_status) REFERENCES status(id)
);

CREATE TABLE IF NOT EXISTS event(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name_event VARCHAR(255) NOT NULL,
	date DATETIME NOT NULL
);

CREATE TABLE IF NOT EXISTS `table`(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name_table VARCHAR(20)  NOT NULL,
	id_status INTEGER,
	FOREIGN KEY(id_status) REFERENCES status(id)
);


CREATE TABLE IF NOT EXISTS `order` (
    id INTEGER AUTO_INCREMENT PRIMARY KEY,
    type_document VARCHAR(255) NOT NULL,
    num_document INTEGER NOT NULL,
    id_table INTEGER,
    id_status INTEGER,
    order_date DATE, 
    FOREIGN KEY (id_table) REFERENCES `table`(id),
    FOREIGN KEY (id_status) REFERENCES status(id)
);

CREATE TABLE IF NOT EXISTS order_product(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	id_order INTEGER,
	id_product INTEGER,
	count INTEGER NOT NULL,
	total DECIMAL(65,2),
	FOREIGN KEY(id_order) REFERENCES `order`(id),
	FOREIGN KEY(id_product) REFERENCES product(id)
);


INSERT INTO status(name) VALUES ('Active'), ('Inactive'), ('Paid'), ('Canceled');
INSERT INTO rol(name) VALUES ('Admistrator'), ('Employee');
INSERT INTO user(name, email, password, id_status, id_rol) VALUES ('Brandon Escudero', 'brandonescudero2810@gmail.com', '$2b$10$e/QF0YMmkDYx0/Zxc1MNS.Dly4bJKbUxPj8J5lfmdqkX18z4To3kO', 1, 1);

INSERT INTO product (name_product, image, price, stock, id_status) VALUES
('Ron Medellin', 'Ron Medellin.jpg', 45000.00, 100, 1),
('Tequila Jose Cuervo', 'Tequila Jose Cuervo.jpg', 80000.00, 75, 1),
('Vodka Smirnoff', 'Vodka Smirnoff.jpg', 60000.00, 120, 1),
('Ginebra Tanqueray', 'Ginebra Tanqueray.jpg', 90000.00, 60, 1),
('Aguardiente Antioqueño', 'Aguardiente Antioqueño.jpg', 35000.00, 200, 1),
('Brandy Domecq', 'Brandy Domecq.jpg', 50000.00, 90, 1),
('Vino Concha y Toro', 'Vino Concha y Toro.jpg', 30000.00, 150, 1),
('Champaña Moet', 'Champaña Moet.jpg', 200000.00, 30, 1),
('Cerveza Club Colombia', 'Cerveza Club Colombia.jpg', 6000.00, 500, 1);

INSERT INTO `table`(name_table, id_status) VALUES ('A', 1), ('B', 1), ('C', 1), ('D', 1);

INSERT INTO `order` (type_document, num_document, id_table, id_status, order_date) VALUES
('Cédula de ciudadanía', 12345678, 1, 3, '2024-05-01'),
('Cédula de extranjería', 87654321, 2, 3, '2024-05-02'),
('NIT', 123123123, 3, 3, '2024-05-03'),
('Cédula de ciudadanía', 23456789, 4, 3, '2024-05-04'),
('Cédula de extranjería', 98765432, 1, 3, '2024-05-05'),
('NIT', 234234234, 2, 3, '2024-05-06'),
('Cédula de ciudadanía', 34567890, 3, 3, '2024-05-07'),
('Cédula de extranjería', 87654321, 4, 3, '2024-05-08'),
('NIT', 345345345, 1, 3, '2024-05-09'),
('Cédula de ciudadanía', 45678901, 2, 3, '2024-05-10'),
('Cédula de extranjería', 76543210, 3, 1, '2024-05-11'),
('NIT', 456456456, 4, 2, '2024-05-12'),
('Cédula de ciudadanía', 56789012, 1, 4, '2024-05-13'),
('Cédula de extranjería', 65432109, 2, 1, '2024-05-14'),
('NIT', 567567567, 3, 2, '2024-05-15'),
('Cédula de ciudadanía', 67890123, 4, 4, '2024-05-16'),
('Cédula de extranjería', 54321098, 1, 1, '2024-05-17'),
('NIT', 678678678, 2, 2, '2024-05-18'),
('Cédula de ciudadanía', 78901234, 3, 4, '2024-05-19'),
('Cédula de extranjería', 43210987, 4, 1, '2024-05-20');


INSERT INTO order_product (id_order, id_product, count, total) VALUES
(1, 1, 2, 90000.00),
(1, 2, 1, 80000.00),
(1, 3, 3, 180000.00),
(1, 4, 1, 90000.00),

(2, 5, 4, 140000.00),
(2, 6, 2, 100000.00),
(2, 7, 1, 30000.00),
(2, 8, 1, 200000.00),

(3, 9, 6, 36000.00),
(3, 1, 1, 45000.00),
(3, 2, 2, 160000.00),
(3, 3, 1, 60000.00),

(4, 4, 3, 270000.00),
(4, 5, 1, 35000.00),
(4, 6, 5, 250000.00),
(4, 7, 2, 60000.00),

(5, 8, 1, 200000.00),
(5, 9, 3, 18000.00),
(5, 1, 1, 45000.00),
(5, 2, 4, 320000.00),

(6, 3, 2, 120000.00),
(6, 4, 2, 180000.00),
(6, 5, 3, 105000.00),
(6, 6, 1, 50000.00),

(7, 7, 2, 60000.00),
(7, 8, 1, 200000.00),
(7, 9, 4, 24000.00),
(7, 1, 3, 135000.00),

(8, 2, 1, 80000.00),
(8, 3, 2, 120000.00),
(8, 4, 1, 90000.00),
(8, 5, 2, 70000.00);




/*Procedures*/

------------------------------------------------------------EVENTS
--INSERT
DELIMITER //
CREATE PROCEDURE insertEvent (
    IN name_event_e VARCHAR(255),
    IN date_e DATETIME 
)
BEGIN 
    SET @maxId = (SELECT COALESCE(MAX(id), 0) FROM `event`);
    SET @sql = CONCAT('ALTER TABLE `event` AUTO_INCREMENT = ', @maxId + 1);
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
    INSERT INTO `event`(name_event, date) VALUES (name_event_e, date_e);
END //
DELIMITER ;


--------

--SELECT eventid
DELIMITER //
CREATE PROCEDURE selectEventId(
    IN id_e INTEGER
)
BEGIN
    SELECT id, name_event, DATE_FORMAT(date, '%Y-%m-%d %H:%i') AS date
    FROM event WHERE id = id_e;
END //
DELIMITER ;


-------------

--SELECT ACTIVE
DELIMITER //
CREATE PROCEDURE selectEventActive (
)
BEGIN 
	SELECT id, name_event, date from event where date >= now();
END //
DELIMITER ;

--------

--UPDATE
DELIMITER //
CREATE PROCEDURE updateEvent (
    IN id_e INTEGER,
    IN name_event_e VARCHAR(255),
    IN date_e DATETIME
)
BEGIN 
    UPDATE event SET name_event = name_event_e, date = date_e WHERE id = id_e;
END //
DELIMITER ;

---------

--DELETE
DELIMITER //
CREATE PROCEDURE deleteEvent (
    IN id_e INTEGER
)
BEGIN 
    DELETE FROM event WHERE id = id_e;
END //
DELIMITER ;

-------

--SELECT TOP
DELIMITER //
CREATE PROCEDURE selectEventTop()
BEGIN
    SET lc_time_names = 'es_ES';
    SELECT 
    name_event,
    DATE_ADD(date, INTERVAL 1 SECOND) AS date,
    YEAR(date) AS year,
    MONTHNAME(date) AS month,
    DAY(date) AS day,
    CONCAT(HOUR(date), ':', MINUTE(date)) AS hour
FROM `event`
WHERE date >= NOW()
ORDER BY date ASC;
END //
DELIMITER ;


-----------------------------------------------------------PRODUCTS
--SELECT
DELIMITER //
CREATE PROCEDURE selectProduct ()
BEGIN 
	SELECT P.*, S.name as status FROM product P INNER JOIN status S ON P.id_status = S.id;
END //
DELIMITER ;

--------------

--SELECT productid
DELIMITER //
CREATE PROCEDURE selectProductId(
	IN id_p INTEGER
)
BEGIN
	SELECT * FROM product WHERE id = id_p;
END //
DELIMITER ;

------

--INSERT
DELIMITER //
CREATE PROCEDURE insertProduct (
		IN name_product_p VARCHAR(255),
		IN image_p VARCHAR(255),
		IN price_p DECIMAL(65, 2),
		IN stock_p INTEGER,	
		IN id_status_p INTEGER
)
BEGIN 
	SET @maxId = (SELECT COALESCE(MAX(id), 0) FROM product);
	SET @sql = CONCAT('ALTER TABLE product AUTO_INCREMENT = ', @maxId + 1);
	PREPARE stmt FROM @sql;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
	INSERT INTO product(name_product, image, price, stock, id_status) VALUES(name_product_p, image_p, price_p, stock_p, id_status_p);
END //
DELIMITER ;

---------

--UPDATE
DELIMITER //
CREATE PROCEDURE updateProduct(
		IN id_p INTEGER,
		IN name_product_p VARCHAR(255),
		IN image_p VARCHAR(255),
		IN price_p DECIMAL(65, 2),
		IN stock_p INTEGER,	
		IN id_status_p INTEGER
)
BEGIN 
	UPDATE product SET name_product = name_product_p, image = image_p, price = price_p, stock = stock_p, id_status= id_status_p WHERE id = id_p;
END //
DELIMITER ;

---------

--DELETE
DELIMITER //
CREATE PROCEDURE deleteProduct(
		IN id_p INTEGER
)
BEGIN 
	DELETE FROM product WHERE id = id_p;
END //
DELIMITER ;


---------------------------------------------------------------USERS
--SELECT
DELIMITER //
CREATE PROCEDURE selectUser()
BEGIN 
	SELECT user.id, user.name, user.email, status.name AS status, rol.name AS rol from user inner join status on user.id_status = status.id INNER JOIN rol on rol.id = user.id_rol;
END //
DELIMITER ;

------------------

--SELECT userid
DELIMITER //
CREATE PROCEDURE selectUserId(
	IN id_u INTEGER
)
BEGIN
	SELECT * FROM user WHERE id = id_u;
END //
DELIMITER ;

---------------

--SELECT useremail
DELIMITER //
CREATE PROCEDURE selectUserEmail(
	IN email_u VARCHAR(250)
)
BEGIN
	SELECT email, password FROM user WHERE email = email_u;
END //
DELIMITER ;

-------------

--INSERT
DELIMITER //
CREATE PROCEDURE insertUser (
    IN name_u VARCHAR(255),
    IN email_u VARCHAR(255),
    IN password_u VARCHAR(255),    
    IN id_status_u INTEGER,
    IN id_rol_u INTEGER
)
BEGIN 
    SET @maxId = (SELECT COALESCE(MAX(id), 0) FROM user);
    SET @sql = CONCAT('ALTER TABLE user AUTO_INCREMENT = ', @maxId + 1);
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
    INSERT INTO user(name, email, password, id_status, id_rol) VALUES(name_u, email_u, password_u, id_status_u, id_rol_u);
END //

DELIMITER ;

----------

--UPDATE
DELIMITER //
CREATE PROCEDURE updateUser(
		IN id_u INTEGER,
		IN name_u VARCHAR(255),
		IN email_u VARCHAR(255),
		IN password_u VARCHAR(255),	
		IN id_status_u INTEGER,
		IN id_rol_u INTEGER
)
BEGIN 
	UPDATE user SET name = name_u, email = email_u, password = password_u, id_status = id_status_u, id_rol = id_rol_u WHERE id = id_u;
END //
DELIMITER ;

-----------

--DELETE
DELIMITER //
CREATE PROCEDURE deleteUser (
    IN id_u INTEGER
)
BEGIN 
    DELETE FROM user WHERE id = id_u;
END //
DELIMITER ;


-----------------------------------------------------------TABLES
--SELECT
DELIMITER //
CREATE PROCEDURE selectTable ()
BEGIN 
	SELECT T.id, T.name_table, T.id_status, S.name FROM `table` T INNER JOIN status S on T.id_status = S.id;
END //
DELIMITER ;

--------------

--SELECT tableid
DELIMITER //
CREATE PROCEDURE selectTableId(
	IN id_t INTEGER
)
BEGIN
	SELECT * FROM `table` WHERE id = id_t;
END //
DELIMITER ;

------

--INSERT
DELIMITER //
CREATE PROCEDURE insertTable (
		IN name_table_t VARCHAR(20),
		IN id_status_t INTEGER
)
BEGIN 
	SET @maxId = (SELECT COALESCE(MAX(id), 0) FROM `table`);
	SET @sql = CONCAT('ALTER TABLE `table` AUTO_INCREMENT = ', @maxId + 1);
	PREPARE stmt FROM @sql;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
	INSERT INTO `table`(name_table, id_status) VALUES(name_table_t, id_status_t);
END //
DELIMITER ;

---------

--UPDATE
DELIMITER //
CREATE PROCEDURE updateTable(
		IN id_t INTEGER,
		IN name_table_t VARCHAR(20),
		IN id_status_t INTEGER
)
BEGIN 
	UPDATE `table` SET name_table = name_table_t, id_status = id_status_t WHERE id = id_t;
END //
DELIMITER ;

---------

--DELETE
DELIMITER //
CREATE PROCEDURE deleteTable(
		IN id_t INTEGER
)
BEGIN 
	DELETE FROM `table` WHERE id = id_t;
END //
DELIMITER ;


-----------------------------------------------------------STATUS
--SELECT
DELIMITER //
CREATE PROCEDURE selectStatus ()
BEGIN 
	SELECT * FROM `status` ;
END //
DELIMITER ;

--------------

--SELECT statusid
DELIMITER //
CREATE PROCEDURE selectStatusId(
	IN id_s INTEGER
)
BEGIN
	SELECT * FROM `status` WHERE id = id_s;
END //
DELIMITER ;

------

--INSERT
DELIMITER //
CREATE PROCEDURE insertStatus (
		IN name_s VARCHAR(255)
)
BEGIN 
	SET @maxId = (SELECT MAX(id) FROM status);
	SET @sql = CONCAT('ALTER TABLE `status` AUTO_INCREMENT = ', @maxId + 1);
	PREPARE stmt FROM @sql;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
	INSERT INTO `status`(name) VALUES(name_s);
END //
DELIMITER ;

---------

--UPDATE
DELIMITER //
CREATE PROCEDURE updateStatus(
		IN id_s INTEGER,
		IN name_s VARCHAR(255)
)
BEGIN 
	UPDATE `status` SET name = name_s WHERE id = id_s;
END //
DELIMITER ;

---------

--DELETE
DELIMITER //
CREATE PROCEDURE deleteStatus(
		IN id_s INTEGER
)
BEGIN 
	DELETE FROM `status` WHERE id = id_s;
END //
DELIMITER ;


-----------------------------------------------------------ROL
--SELECT
DELIMITER //
CREATE PROCEDURE selectRol ()
BEGIN 
	SELECT * FROM rol ;
END //
DELIMITER ;

--------------

--SELECT rolid
DELIMITER //
CREATE PROCEDURE selectRolId(
	IN id_r INTEGER
)
BEGIN
	SELECT * FROM rol WHERE id = id_r;
END //
DELIMITER ;

------

--INSERT
DELIMITER //
CREATE PROCEDURE insertRol (
		IN name_r VARCHAR(255)
)
BEGIN 
	SET @maxId = (SELECT MAX(id) FROM rol);
	SET @sql = CONCAT('ALTER TABLE rol AUTO_INCREMENT = ', @maxId + 1);
	PREPARE stmt FROM @sql;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
	INSERT INTO rol(name) VALUES(name_r);
END //
DELIMITER ;

---------

--UPDATE
DELIMITER //
CREATE PROCEDURE updateRol(
		IN id_r INTEGER,
		IN name_r VARCHAR(255)
)
BEGIN 
	UPDATE rol SET name = name_r WHERE id = id_r;
END //
DELIMITER ;

---------

--DELETE
DELIMITER //
CREATE PROCEDURE deleteRol(
		IN id_r INTEGER
)
BEGIN 
	DELETE FROM rol WHERE id = id_r;
END //
DELIMITER ;


-----------------------------------------------------------ORDER
--SELECT
DELIMITER //
CREATE PROCEDURE selectOrder ()
BEGIN 
	SELECT R.*, T.name_table, S.name as status FROM `order` R INNER JOIN `table` T ON T.id = R.id_table INNER JOIN status S ON S.id = R.id_status;
END //
DELIMITER ;

--------------

--SELECT orderid
DELIMITER //
CREATE PROCEDURE selectOrderId(
	IN id_o INTEGER
)
BEGIN
	SELECT O.*, T.name_table FROM `order` O INNER JOIN `table` T ON O.id_table = T.id WHERE O.id = id_o;
END //
DELIMITER ;

--------------

--SELECT orderClient
DELIMITER //
CREATE PROCEDURE selectOrderClient(
	IN type_document_o VARCHAR(255),
	IN num_document_o INTEGER,
	IN id_table_o INTEGER
)
BEGIN
	SELECT * FROM `order` WHERE type_document = type_document_o AND num_document = num_document_o AND id_table = id_table_o AND id_status = 1;
END //
DELIMITER ;

--------------

--SELECT ordernumdocument
DELIMITER //
CREATE PROCEDURE selectOrderNumDocument(
	IN num_document_o INTEGER
)
BEGIN
	SELECT * FROM `order` WHERE num_document = num_document_o AND id_status = 1;
END //
DELIMITER ;

------

--INSERT
DELIMITER //
CREATE PROCEDURE insertOrder (
    IN type_document_o VARCHAR(255),
    IN num_document_o INTEGER,
    IN id_table_o INTEGER,
    IN id_status_o INTEGER
)
BEGIN 
    SET @maxId = (SELECT COALESCE(MAX(id),0) FROM `order`);
    SET @sql = CONCAT('ALTER TABLE `order` AUTO_INCREMENT = ', @maxId + 1);
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
    
    INSERT INTO `order` (type_document, num_document, id_table, id_status, order_date) 
    VALUES (type_document_o, num_document_o, id_table_o, id_status_o, CURDATE());
END //
DELIMITER ;


---------

--UPDATE
DELIMITER //
CREATE PROCEDURE updateOrder(
		IN id_o INTEGER,
		IN id_status_o INTEGER
)
BEGIN 
	UPDATE `order` SET id_status = id_status_o WHERE id = id_o;
END //
DELIMITER ;

---------

--DELETE
DELIMITER //
CREATE PROCEDURE deleteOrder(
		IN id_o INTEGER
)
BEGIN 
	UPDATE `order` SET id_status = 4 WHERE id = id_o;
END //
DELIMITER ;


-----------------------------------------------------------ORDER PRODUCTS
--SELECT
DELIMITER //
CREATE PROCEDURE selectOrderProducts ()
BEGIN 
	SELECT * FROM order_product;
END //
DELIMITER ;

--------------

--SELECT productid
DELIMITER //
CREATE PROCEDURE selectOrderProductId(
	IN id_op INTEGER
)
BEGIN
	SELECT * FROM order_product WHERE id = id_op;
END //
DELIMITER ;

------

--SELECT orderid
DELIMITER //
CREATE PROCEDURE selectOrderIdProduct(
	IN id_order_op INTEGER
)
BEGIN
	SELECT OP.*, P.name_product, P.price FROM order_product OP INNER JOIN product P ON OP.id_product = P.id WHERE OP.id_order = id_order_op;
END //
DELIMITER ;

------

------

--SELECT orderidproductid
DELIMITER //
CREATE PROCEDURE selectOrderIdProductId(
	IN id_order_op INTEGER,
	IN id_product_op INTEGER
)
BEGIN
	SELECT * FROM `order_product` WHERE id_order = id_order_op AND id_product = id_product_op;
END //
DELIMITER ;

------

--INSERT
DELIMITER //
CREATE PROCEDURE insertOrderProduct (
		IN id_order_op INTEGER,
		IN id_product_op INTEGER,
		IN count_op INTEGER,
		IN total_op DECIMAL(65,2)
)
BEGIN 
	SET @maxId = (SELECT COALESCE(MAX(id),0) FROM order_product);
	SET @sql = CONCAT('ALTER TABLE order_product AUTO_INCREMENT = ', @maxId + 1);
	PREPARE stmt FROM @sql;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
	INSERT INTO order_product(id_order, id_product, count, total) VALUES(id_order_op, id_product_op, count_op, total_op);
END //
DELIMITER ;

---------

--UPDATE
DELIMITER //
CREATE PROCEDURE updateOrderProduct(
		IN id_op INTEGER,
		IN id_order_op INTEGER,
		IN id_product_op INTEGER,
		IN count_op INTEGER,
		IN total_op DECIMAL(65,2)
)
BEGIN 
	UPDATE order_product SET id_order = id_order_op, id_product = id_product_op, count = count_op, total = total_op WHERE id = id_op;
END //
DELIMITER ;

---------

--DELETE
DELIMITER //
CREATE PROCEDURE deleteOrderProduct(
		IN id_op INTEGER
)
BEGIN 
	DELETE FROM order_product WHERE id = id_op;
END //
DELIMITER ;


/*Procedure for update status where stock is 0 or less*/

DELIMITER //
CREATE PROCEDURE updateAllProductStatus()
BEGIN
    UPDATE product
    SET id_status = 2
    WHERE Stock <= 0;
END //

DELIMITER ;


  
CREATE EVENT updateProductStatusEvent
    ON SCHEDULE EVERY 1 HOUR
    DO
        CALL updateAllProductStatus();

SHOW VARIABLES LIKE 'event_scheduler';

SET GLOBAL event_scheduler = ON;

/*Procedure for select Sales agroups*/

DELIMITER //
CREATE PROCEDURE selectSales()
BEGIN
    SELECT 
        O.type_document,
        T.name_table,
        p.name_product, 
        SUM(p.price) AS price, 
        SUM(OP.count) AS count, 
        SUM(OP.total) AS total 
    FROM `order` O 
        INNER JOIN order_product OP ON O.id = OP.id_order 
        INNER JOIN product P ON OP.id_product = P.id
        INNER JOIN `table` T ON O.id_table = T.id
    WHERE O.id_status = 3 AND O.order_date BETWEEN DATE_FORMAT(CURDATE(), '%Y-%m-01') AND LAST_DAY(CURDATE())
    GROUP BY 
        O.type_document,
        P.name_product;
END //
DELIMITER ;

/*Procedure for sales for month*/

DELIMITER //
CREATE PROCEDURE selectSalesMonth()
BEGIN
 	SET lc_time_names = 'es_ES';
   SELECT 
        DATE_FORMAT(O.order_date, '%M') AS month_name,
        SUM(OP.count) AS count, 
        SUM(OP.total) AS total 
    FROM `order` O 
        INNER JOIN order_product OP ON O.id = OP.id_order
    WHERE O.id_status = 3 
        AND YEAR(O.order_date) = YEAR(CURDATE())
    GROUP BY
        DATE_FORMAT(O.order_date, '%M');
END //
DELIMITER ;

/*Procedure for select Sales table*/

DELIMITER //
CREATE PROCEDURE selectSalesTable()
BEGIN
    SELECT 
        T.name_table,
        SUM(p.price) AS price, 
        SUM(OP.count) AS count, 
        SUM(OP.total) AS total 
    FROM `order` O 
        INNER JOIN order_product OP ON O.id = OP.id_order 
        INNER JOIN product P ON OP.id_product = P.id
        INNER JOIN `table` T ON O.id_table = T.id
    WHERE O.id_status = 3 AND YEAR(O.order_date) = YEAR(CURDATE())
    GROUP BY 
        T.name_table;
END //
DELIMITER ;


/*Procedure for select Sales product totoal*/

DELIMITER //
CREATE PROCEDURE selectSalesProduct()
BEGIN
    SELECT 
        P.name_product,
        SUM(p.price) AS price, 
        SUM(OP.count) AS count, 
        SUM(OP.total) AS total 
    FROM `order` O 
        INNER JOIN order_product OP ON O.id = OP.id_order 
        INNER JOIN product P ON OP.id_product = P.id
        INNER JOIN `table` T ON O.id_table = T.id
    WHERE O.id_status = 3 AND YEAR(O.order_date) = YEAR(CURDATE())
    GROUP BY 
        P.name_product;
END //
DELIMITER ;

/*Procedure for select Sales product monthActual*/

DELIMITER //
CREATE PROCEDURE selectSalesProductMonth()
BEGIN
    SELECT 
        P.name_product,
        SUM(p.price) AS price, 
        SUM(OP.count) AS count, 
        SUM(OP.total) AS total 
    FROM `order` O 
        INNER JOIN order_product OP ON O.id = OP.id_order 
        INNER JOIN product P ON OP.id_product = P.id
        INNER JOIN `table` T ON O.id_table = T.id
    WHERE O.id_status = 3 AND O.order_date BETWEEN DATE_FORMAT(CURDATE(), '%Y-%m-01') AND LAST_DAY(CURDATE())
    GROUP BY 
        P.name_product;
END //
DELIMITER ;

ALTER TABLE order_product DROP FOREIGN KEY order_product_ibfk_1; -- Elimina la clave externa existente
ALTER TABLE order_product ADD CONSTRAINT order_product_ibfk_1 FOREIGN KEY (id_order) REFERENCES `order` (id) ON DELETE CASCADE; -- Agrega la nueva clave externa con ON DELETE CASCADE
