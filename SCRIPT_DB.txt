CREATE DATABASE  project_bar
    CHARACTER SET utf8mb4
    COLLATE utf8mb4_unicode_ci;

USE project_bar;


CREATE TABLE IF NOT EXISTS status(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(255) NOT NULL
);


CREATE TABLE IF NOT EXISTS rol(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS user(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(255) NOT NULL,
	email VARCHAR(255) UNIQUE NOT NULL,
	password VARCHAR(255) NOT NULL,
	id_status INTEGER,
	id_rol INTEGER,
	FOREIGN KEY(id_rol) REFERENCES rol(id),
	FOREIGN KEY(id_status) REFERENCES Status(id)
);

CREATE TABLE IF NOT EXISTS product(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name_product VARCHAR(255) UNIQUE NOT NULL,
	price DECIMAL(65, 2) NOT NULL,
	Stock INTEGER NOT NULL,	
	id_status INTEGER,
	FOREIGN KEY(id_status) REFERENCES Status(id)
);

CREATE TABLE IF NOT EXISTS event(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name_event VARCHAR(255) NOT NULL,
	date DATETIME NOT NULL
);

CREATE TABLE IF NOT EXISTS `table`(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	name_table VARCHAR(20) NOT NULL,
	id_status INTEGER,
	FOREIGN KEY(id_status) REFERENCES Status(id)
);


CREATE TABLE IF NOT EXISTS `order`(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	type_document VARCHAR(255) NOT NULL,
	num_document INTEGER NOT NULL,
	id_table INTEGER,
	FOREIGN KEY(id_table) REFERENCES `table`(id)
);

CREATE TABLE IF NOT EXISTS order_product(
	id INTEGER AUTO_INCREMENT PRIMARY KEY,
	id_order INTEGER,
	id_product INTEGER,
	acount INTEGER NOT NULL,
	total DECIMAL(65,2),
	id_status INTEGER,
	FOREIGN KEY(id_order) REFERENCES `order`(id),
	FOREIGN KEY(id_product) REFERENCES product(id),
	FOREIGN KEY(id_status) REFERENCES Status(id)
);


INSERT INTO Rol(name) VALUES ('Admistrator'), ('Employee');
INSERT INTO status(name) VALUES ('Active'), ('Inactive'), ('Paied');








/*Procedures*/


------------------------------------------------------------EVENTS
--INSERT
DELIMITER //
CREATE PROCEDURE insertEvent (
    IN name_event_e VARCHAR(255),
    IN date_e DATETIME 
)
BEGIN 
    SET @maxId = (SELECT MAX(id) FROM `event`);
    SET @sql = CONCAT('ALTER TABLE `event` AUTO_INCREMENT = ', @maxId + 1);
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
    INSERT INTO `event`(name_event, date) VALUES (name_event_e, date_e);
END //
DELIMITER ;


--------

--SELECT eventid
DELIMITER //
CREATE PROCEDURE selectEventId(
	IN id_e INTEGER
)
BEGIN
	SELECT * FROM event WHERE id = id_e;
END //
DELIMITER ;

-------------

--SELECT ACTIVE
DELIMITER //
CREATE PROCEDURE selectEventActive (
)
BEGIN 
	SELECT id, name_event, date from event where date >= now();
END //
DELIMITER ;

--------

--UPDATE
DELIMITER //
CREATE PROCEDURE updateEvent (
    IN id_e INTEGER,
    IN name_event_e VARCHAR(255),
    IN date_e DATETIME
)
BEGIN 
    UPDATE event SET name_event = name_event_e, date = date_e WHERE id = id_e;
END //
DELIMITER ;

---------

--DELETE
DELIMITER //
CREATE PROCEDURE deleteEvent (
    IN id_e INTEGER
)
BEGIN 
    DELETE FROM event WHERE id = id_e;
END //
DELIMITER ;


-----------------------------------------------------------PRODUCTS
--SELECT
DELIMITER //
CREATE PROCEDURE selectProduct ()
BEGIN 
	SELECT * FROM product ;
END //
DELIMITER ;

--------------

--SELECT productid
DELIMITER //
CREATE PROCEDURE selectProductId(
	IN id_p INTEGER
)
BEGIN
	SELECT * FROM product WHERE id = id_p;
END //
DELIMITER ;

------

--INSERT
DELIMITER //
CREATE PROCEDURE insertProduct (
		IN name_product_p VARCHAR(255),
		IN price_p DECIMAL(65, 2),
		IN stock_p INTEGER,	
		IN id_status_p INTEGER
)
BEGIN 
	SET @maxId = (SELECT MAX(id) FROM product);
	SET @sql = CONCAT('ALTER TABLE product AUTO_INCREMENT = ', @maxId + 1);
	PREPARE stmt FROM @sql;
	EXECUTE stmt;
	DEALLOCATE PREPARE stmt;
	INSERT INTO product(name_product, price, stock, id_status) VALUES(name_product_p, price_p, stock_p, id_status_p);
END //
DELIMITER ;

---------

--UPDATE
DELIMITER //
CREATE PROCEDURE updateProduct(
		IN id_p INTEGER,
		IN name_product_p VARCHAR(255),
		IN price_p DECIMAL(65, 2),
		IN stock_p INTEGER,	
		IN id_status_p INTEGER
)
BEGIN 
	UPDATE product SET name_product = name_product_p, price = price_p, stock = stock_p, id_status= id_status_p WHERE id = id_p;
END //
DELIMITER ;

---------

--DELETE
DELIMITER //
CREATE PROCEDURE deleteProduct(
		IN id_p INTEGER
)
BEGIN 
	DELETE FROM product WHERE id = id_p;
END //
DELIMITER ;


---------------------------------------------------------------USERS
--SELECT
DELIMITER //
CREATE PROCEDURE selectUser()
BEGIN 
	SELECT user.id, user.name, user.email, status.name AS status, rol.name AS rol from user inner join status on user.id_status = status.id INNER JOIN rol on rol.id = user.id_rol;
END //
DELIMITER ;

------------------

--SELECT userid
DELIMITER //
CREATE PROCEDURE selectUserId(
	IN id_u INTEGER
)
BEGIN
	SELECT * FROM user WHERE id = id_u;
END //
DELIMITER ;

---------------

--SELECT useremail
DELIMITER //
CREATE PROCEDURE selectUserEmail(
	IN email_u VARCHAR(250)
)
BEGIN
	SELECT email, password FROM user WHERE email = email_u;
END //
DELIMITER ;

-------------

--INSERT
DELIMITER //
CREATE PROCEDURE insertUser (
    IN name_u VARCHAR(255),
    IN email_u VARCHAR(255),
    IN password_u VARCHAR(255),    
    IN id_status_u INTEGER,
    IN id_rol_u INTEGER
)
BEGIN 
    SET @maxId = (SELECT MAX(id) FROM user);
    SET @sql = CONCAT('ALTER TABLE user AUTO_INCREMENT = ', @maxId + 1);
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
    INSERT INTO user(name, email, password, id_status, id_rol) VALUES(name_u, email_u, password_u, id_status_u, id_rol_u);
END //

DELIMITER ;

----------

--UPDATE
DELIMITER //
CREATE PROCEDURE updateUser(
		IN id_u INTEGER,
		IN name_u VARCHAR(255),
		IN email_u VARCHAR(255),
		IN password_u VARCHAR(255),	
		IN id_status_u INTEGER,
		IN id_rol_u INTEGER
)
BEGIN 
	UPDATE user SET name = name_u, email = email_u, password = password_u, id_status = id_status_u, id_rol = id_rol_u WHERE id = id_u;
END //
DELIMITER ;

-----------

--DELETE
DELIMITER //
CREATE PROCEDURE deleteUser (
    IN id_u INTEGER
)
BEGIN 
    DELETE FROM user WHERE id = id_u;
END //
DELIMITER ;


/*Procedure for update status where stock is 0 or less*/

DELIMITER //
CREATE PROCEDURE updateAllProductStatus()
BEGIN
    UPDATE product
    SET id_status = 2
    WHERE Stock <= 0;
END //

DELIMITER ;
  
CREATE EVENT updateProductStatusEvent
    ON SCHEDULE EVERY 1 HOUR
    DO
        CALL updateAllProductStatus();

SHOW VARIABLES LIKE 'event_scheduler';

SET GLOBAL event_scheduler = ON;




